# run local build
# docker-compose up

version: "3"

services:
  rabbitmq:
    image: rabbitmq:3.9-management
    ports:
      - '5672:5672'
      - '15672:15672'
    environment:
      - RABBITMQ_USERNAME=guest
      - RABBITMQ_PASSWORD=guest
    volumes:
      - 'rabbitmq_data:/var/lib/rabbitmq/mnesia'
    networks:
      - app-tier
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "-q", "ping"]
      interval: 5s
      timeout: 5s
      retries: 5

  mongo:
    image: mongo:5.0.5-focal
    restart: always
    ports:
      - '27017:27017'
    volumes:
      - 'mongo_data:/data/db'
    environment:
      MONGO_INITDB_ROOT_USERNAME: root
      MONGO_INITDB_ROOT_PASSWORD: example
    networks:
      - app-tier
    healthcheck:
      test: ["CMD", "mongo", "--eval", "db.adminCommand('ping')"]
      interval: 5s
      timeout: 5s
      retries: 5

  tg_bot:
    build:
      dockerfile: build/package/Dockerfile
      context: ../.
    depends_on:
      rabbitmq:
        condition: service_healthy
      mongo:
        condition: service_healthy
    restart: always
    volumes:
      - './config.docker.yaml:/config.yaml'
    command:
      - tg_bot
      - -c
      - config.yaml
    networks:
      - app-tier

  receiver:
    build:
      dockerfile: build/package/Dockerfile
      context: ../.
    depends_on:
      rabbitmq:
        condition: service_healthy
      mongo:
        condition: service_healthy
    volumes:
      - './config.docker.yaml:/config.yaml'
    ports:
      - '25:21025'
    command:
      - receiver
      - -c
      - config.yaml
    networks:
      - app-tier
    restart: always

volumes:
  rabbitmq_data:
    driver: local
  mongo_data:
    driver: local


networks:
  app-tier:
    driver: bridge